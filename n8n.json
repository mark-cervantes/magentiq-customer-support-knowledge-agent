{
  "name": "magentiq customer support",
  "nodes": [
    {
      "parameters": {
        "content": "## üì• INPUT VALIDATION\n\nValidates incoming request and sets defaults\n- Requires: { \"question\": string }\n- Optional: { \"mode\": \"bm25\" | \"emb\", \"kb_url\": string }\n- Basic Auth: magentiq/magentiq\n- Outputs: { valid, question, mode, kb_url? }",
        "height": 180,
        "width": 320
      },
      "id": "e34f04c9-0c58-451c-a78b-7d4f69522324",
      "name": "Input Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2624,
        -32
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "support-agent",
        "authentication": "basicAuth",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "7d61ef4f-5186-4721-8d6d-5298f160ea2d",
      "name": "üåê Webhook Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2528,
        176
      ],
      "webhookId": "cb4e783b-26f2-458a-b607-f3ede06c7a15",
      "credentials": {
        "httpBasicAuth": {
          "id": "gZPST9zUut96TUgx",
          "name": "Magentiq dummy creds"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst out = [];\nfor (const it of items) {\n  const body = it.json.body || {};   // ‚úÖ use .body\n  const q = String(body.question ?? \"\").trim();\n  const mode = String(body.mode ?? \"bm25\").toLowerCase() === \"emb\" ? \"emb\" : \"bm25\";\n  const kb_url = typeof body.kb_url === \"string\" ? body.kb_url.trim() : \"\";\n  if (!q || q.length < 4) { \n    out.push({ json: { valid: false, error: true, message: \"Invalid input: body must include non-empty 'question' (min 4 chars).\" } });\n    continue;\n  }\n  const MAX_Q = 1000;\n  const question = q.length > MAX_Q ? q.slice(0, MAX_Q) : q;\n  out.push({ json: { valid: true, error: false, question, mode, kb_url } });\n}\nreturn out;\n"
      },
      "id": "78c2f771-9a92-4945-b02f-65e92de9abfd",
      "name": "‚úÖ Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2256,
        176
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.valid}}",
              "operation": "isTrue"
            }
          ]
        },
        "options": {}
      },
      "id": "e92d2d63-313a-4775-a5af-3bf798a5a5ef",
      "name": "‚ùì Valid Input?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2016,
        176
      ]
    },
    {
      "parameters": {
        "content": "## üìö KB LOADING\n\nLoads FAQ from URL if kb_url provided, else uses embedded 5-item KB.\n- Input: kb_url (optional)\n- Output: { kb: [{ id, title, content }] }",
        "width": 320
      },
      "id": "1168ead4-315d-4426-9860-8e8f9639d4c0",
      "name": "KB Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1872,
        -64
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "673244e4-d515-4c1d-9fd7-005db4a99ca1",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "792e18b5-a371-4d76-a9a6-f05f1fca3e8a",
      "name": "üîó Has KB URL?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1744,
        96
      ]
    },
    {
      "parameters": {
        "url": "={{$json.kb_url}}",
        "options": {}
      },
      "id": "7bc4180c-11ef-485b-9921-30ab2fa614f4",
      "name": "üåê Load External KB",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1504,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      id: \"KB001\",\n      title: \"Password Reset\",\n      content: \"To reset your account password, click 'Forgot Password' on the login page, enter your registered email address, and follow the instructions in the reset email.\"\n    }\n  },\n  {\n    json: {\n      id: \"KB002\",\n      title: \"Change Billing Address\",\n      content: \"Log in to your account, go to 'Account Settings' > 'Billing', and click 'Edit Billing Address'. Save changes before exiting.\"\n    }\n  },\n  {\n    json: {\n      id: \"KB003\",\n      title: \"Cancel Subscription\",\n      content: \"To cancel your subscription, go to 'Account Settings' > 'Subscription', select 'Cancel Subscription', and confirm the cancellation. Your subscription will remain active until the end of the billing cycle.\"\n    }\n  },\n  {\n    json: {\n      id: \"KB004\",\n      title: \"Refund Policy\",\n      content: \"We offer a 30-day money-back guarantee on all annual subscriptions. Refunds are processed within 5-7 business days after approval.\"\n    }\n  },\n  {\n    json: {\n      id: \"KB005\",\n      title: \"Two-Factor Authentication\",\n      content: \"Enable 2FA by navigating to 'Account Settings' > 'Security', clicking 'Enable Two-Factor Authentication', and scanning the QR code with an authenticator app.\"\n    }\n  }\n];\n"
      },
      "id": "1f885c8a-34fc-4672-834a-184ee4610703",
      "name": "üíæ Embedded KB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1504,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "let kb = [];\nconst payload = $input.first()?.json;\nif (Array.isArray(payload)) {\n  kb = payload;\n} else if (Array.isArray(payload?.kb)) {\n  kb = payload.kb;\n} else if (Array.isArray(payload?.data)) {\n  kb = payload.data;\n} else {\n  kb = [\n    { id: \"KB001\", title: \"Password Reset\", content: \"To reset your account password, click 'Forgot Password' on the login page, enter your registered email address, and follow the instructions in the reset email.\" },\n    { id: \"KB002\", title: \"Change Billing Address\", content: \"Log in to your account, go to 'Account Settings' > 'Billing', and click 'Edit Billing Address'. Save changes before exiting.\" },\n    { id: \"KB003\", title: \"Cancel Subscription\", content: \"To cancel your subscription, go to 'Account Settings' > 'Subscription', select 'Cancel Subscription', and confirm the cancellation. Your subscription will remain active until the end of the billing cycle.\" },\n    { id: \"KB004\", title: \"Refund Policy\", content: \"We offer a 30-day money-back guarantee on all annual subscriptions. Refunds are processed within 5-7 business days after approval.\" },\n    { id: \"KB005\", title: \"Two-Factor Authentication\", content: \"Enable 2FA by navigating to 'Account Settings' > 'Security', clicking 'Enable Two-Factor Authentication', and scanning the QR code with an authenticator app.\" }\n  ];\n}\nif (!Array.isArray(kb) || kb.length === 0) {\n  throw new Error(\"Knowledge base is empty or failed to load.\");\n}\nconst seen = new Set();\nkb = kb\n  .filter((r) => r && r.id && r.content)\n  .filter((r) => { const k = String(r.id).trim(); if (seen.has(k)) return false; seen.add(k); return true; })\n  .map((r) => ({ id: String(r.id).trim(), title: String(r.title || \"\").trim(), content: String(r.content || \"\").trim() }));\nreturn [{ json: { kb } }];"
      },
      "id": "d5515aa2-009a-4461-b6ef-169d4d442006",
      "name": "üîÑ Normalize KB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1296,
        96
      ]
    },
    {
      "parameters": {
        "mode": "mergeByPosition",
        "options": {}
      },
      "id": "43abea54-4d72-45da-b0b4-a647644e8b7e",
      "name": "üîó Merge Question + KB",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        -1072,
        176
      ]
    },
    {
      "parameters": {
        "content": "## üîç RETRIEVAL\nBM25 (orange): keyword relevance\nEmbeddings (purple): semantic cosine",
        "height": 120,
        "width": 288
      },
      "id": "68eeadea-d07b-4ced-ab2f-234bf788f865",
      "name": "Retrieval Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -944,
        -16
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.mode}}",
              "operation": "equal",
              "value2": "emb"
            }
          ]
        },
        "options": {}
      },
      "id": "c5492f08-b99b-4151-8028-513379ec435a",
      "name": "üß† Use Embeddings?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -848,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "const inItem = $input.first();\nif (!inItem) throw new Error(\"No input for BM25 Rank.\");\nconst { question, kb, mode } = inItem.json;\nfunction tokenize(text) {\n  return text.toLowerCase().replace(/[^a-z0-9\\s>\\/']/gi, \" \").split(/\\s+/).filter(Boolean).filter((t) => !STOP.has(t));\n}\nconst STOP = new Set([\"a\",\"an\",\"the\",\"and\",\"or\",\"but\",\"if\",\"then\",\"than\",\"so\",\"to\",\"of\",\"in\",\"on\",\"for\",\"with\",\"as\",\"by\",\"is\",\"are\",\"was\",\"were\",\"be\",\"been\",\"at\",\"it\",\"this\",\"that\",\"these\",\"those\",\"we\",\"you\",\"your\",\"our\",\"i\"]);\nconst k1 = 1.5, b = 0.75;\nconst docs = kb.map((d) => ({ id: d.id, title: d.title || \"\", content: d.content || \"\", tokens: tokenize(`${d.title || \"\"} ${d.content || \"\"}`) }));\nconst N = docs.length;\nconst docLens = docs.map((d) => d.tokens.length);\nconst avgdl = docLens.reduce((a,b)=>a+b,0)/Math.max(N,1);\nconst df = new Map();\nfor (const d of docs){ const uniq=new Set(d.tokens); for (const t of uniq) df.set(t,(df.get(t)||0)+1); }\nconst idf = new Map();\nfor (const [t,n_i] of df.entries()){ idf.set(t, Math.log((N - n_i + 0.5) / (n_i + 0.5) + 1)); }\nfor (const d of docs){ d.tf = new Map(); for (const t of d.tokens) d.tf.set(t,(d.tf.get(t)||0)+1); }\nconst qTokens = tokenize(question || \"\");\nconst scored = docs.map((d, idx) => { let s = 0; for (const t of qTokens){ const f=d.tf.get(t)||0; if(!f) continue; const idf_t=idf.get(t)||0; const denom = f + k1 * (1 - b + (b * docLens[idx]) / avgdl); s += idf_t * ((f * (k1 + 1)) / Math.max(denom, 1e-9)); } return { d, score: s }; });\nconst max = Math.max(...scored.map(x=>x.score),0), min = Math.min(...scored.map(x=>x.score),0);\nconst normed = scored.map(x=>({ ...x, norm: max===min?0:(x.score-min)/(max-min) })).sort((a,b)=>b.norm-a.norm);\nconst top_k = Math.min(3, Math.max(0, kb.length));\nconst selected = normed.slice(0, top_k).filter(x=>x.norm>0);\nreturn [{ json: { question, mode: mode || \"bm25\", retrieval: { method: \"bm25\", top_k, selected: selected.map(x=>({ id:x.d.id, title:x.d.title, content:x.d.content, score:x.norm })), retrieval_conf: selected.length ? selected[0].norm : 0 } } }];"
      },
      "id": "1b404ae5-6ab0-4d6d-95d4-0bc6e7f96e4c",
      "name": "üìä BM25 Keyword Scoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        336
      ]
    },
    {
      "parameters": {
        "jsCode": "const inItem = $input.first();\nif (!inItem) throw new Error(\"No input for Prepare Embeddings.\");\nconst { kb, question, mode } = inItem.json;\nreturn [{ json: { question, mode: \"emb\", texts: kb.map(d=>`${d.title || \"\"}\\n\\n${d.content || \"\"}`), meta: kb.map(d=>({ id: d.id, title: d.title || \"\" })) } }];"
      },
      "id": "746ea314-51d0-4fc1-894b-bf2ade400c74",
      "name": "üìù Prepare Embedding Texts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        16
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/embeddings",
        "options": {}
      },
      "id": "3e7cf55c-c364-4e38-a691-c422bf24c857",
      "name": "üß† Generate Doc Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -416,
        -96
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/embeddings",
        "options": {}
      },
      "id": "2d861ebf-5125-4347-b398-d49654d54f8c",
      "name": "‚ùì Generate Query Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -416,
        112
      ]
    },
    {
      "parameters": {
        "mode": "mergeByPosition",
        "options": {}
      },
      "id": "e928fbed-f3de-49fe-9242-2a775c2fd77d",
      "name": "üîó Merge Doc Embeddings",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        -192,
        16
      ]
    },
    {
      "parameters": {
        "jsCode": "const j = $input.first().json;\nreturn [{ json: { doc_embeddings: Array.isArray(j.data) ? j.data.map(d=>d.embedding) : [], texts: j.texts || [], meta: j.meta || [], question: j.question, mode: j.mode || \"emb\" } }];"
      },
      "id": "d8a17dec-032c-4325-8288-711f423b702b",
      "name": "üì¶ Package Doc Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        16
      ]
    },
    {
      "parameters": {
        "jsCode": "const j = $input.first().json;\nconst qEmb = Array.isArray(j.data) && j.data[0] && Array.isArray(j.data[0].embedding) ? j.data[0].embedding : [];\nreturn [{ json: { query_embedding: qEmb } }];"
      },
      "id": "828d540d-4cf7-42bd-8162-19e1890909b4",
      "name": "üì¶ Package Query Embedding",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        208
      ]
    },
    {
      "parameters": {
        "mode": "mergeByPosition",
        "options": {}
      },
      "id": "811abfe1-7703-4517-af23-b5aff033d2f2",
      "name": "üîó Merge All Embeddings",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        240,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "function cosine(a,b){ let dot=0,na=0,nb=0; const len=Math.min(a.length,b.length); for(let i=0;i<len;i++){const x=a[i],y=b[i]; dot+=x*y; na+=x*x; nb+=y*y;} if(!na||!nb) return 0; return dot/(Math.sqrt(na)*Math.sqrt(nb)); }\nconst j=$input.first().json;\nconst docEmb=j.doc_embeddings||[];\nconst qEmb=j.query_embedding||[];\nconst texts=j.texts||[];\nconst meta=j.meta||[];\nconst question=j.question;\nconst mode=j.mode||\"emb\";\nif(!docEmb.length||!qEmb.length){ return [{ json:{ question, mode, retrieval:{ method:\"emb\", top_k:0, selected:[], retrieval_conf:0 } } }]; }\nconst scores=docEmb.map((e,i)=>({ idx:i, score:cosine(e,qEmb) }));\nconst maxS=Math.max(...scores.map(s=>s.score),0), minS=Math.min(...scores.map(s=>s.score),0);\nconst norm=scores.map(s=>({ ...s, norm:maxS===minS?0:(s.score-minS)/(maxS-minS) })).sort((a,b)=>b.norm-a.norm);\nconst top_k=Math.min(3, texts.length);\nconst selected=norm.slice(0, top_k);\nconst selectedDocs=selected.map(s=>({ id: meta[s.idx]?.id ?? String(s.idx), title: meta[s.idx]?.title ?? \"\", content: texts[s.idx], score: s.norm }));\nreturn [{ json: { question, mode, retrieval: { method:\"emb\", top_k, selected: selectedDocs, retrieval_conf: selected.length ? selected[0].norm : 0 } } }];"
      },
      "id": "f2f32087-8eef-4ad6-ac9d-11925a59c7c2",
      "name": "üìà Cosine Similarity Ranking",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        112
      ]
    },
    {
      "parameters": {
        "content": "## ü§ñ LLM PROCESSING\nBuild prompt -> call Claude via OpenRouter -> parse JSON",
        "height": 120,
        "width": 320
      },
      "id": "db382ef1-151f-42c7-8e6d-ffb3fe0b654f",
      "name": "LLM Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        576,
        352
      ]
    },
    {
      "parameters": {
        "jsCode": "const j=$input.first().json;\nconst question=j.question||\"\";\nconst retrieval=j.retrieval||{ selected:[], retrieval_conf:0 };\nconst contexts=(retrieval.selected||[]).map((d,i)=>{ const safe=(s)=>String(s??\"\").replace(/\"/g,'\\\\\"'); return `KB[${i+1}]: { \"id\": \"${safe(d.id)}\", \"title\": \"${safe(d.title)}\", \"content\": \"${safe(d.content)}\" }`; }).join(\"\\n\\n\");\nconst schema={ type:\"object\", required:[\"answer\",\"confidence_score\",\"sources\"], properties:{ answer:{type:\"string\"}, confidence_score:{type:\"number\",minimum:0,maximum:1}, sources:{type:\"array\",items:{type:\"string\"},minItems:0} } };\nconst system=(\n`You are a Customer Support Knowledge Agent.\nRules:\n- Only answer using the provided KB contexts.\n- If contexts are insufficient, say you don't have enough info and suggest next steps. Do not invent facts.\n- Be concise and task-oriented for customers.\n- Output must be a single JSON object and valid JSON, no extra text.\n- Follow this JSON schema exactly (types and keys):\n${JSON.stringify(schema)}\n`).trim();\nconst user=(\n`User question:\n\"${question}\"\n\nRelevant contexts:\n${contexts}\n\nInstructions:\n1) Use only these contexts to answer.\n2) List sources as an array of KB ids (e.g., [\"KB001\"]).\n3) Set confidence_score between 0 and 1.\n4) If you cannot answer from the contexts, return a helpful message and set confidence_score <= 0.4.\n\nReturn only JSON.\n`).trim();\nreturn [{ json: { messages:[ {role:\"system\", content:system}, {role:\"user\", content:user} ], question, mode:j.mode||\"bm25\", retrieval, retrieval_conf: retrieval.retrieval_conf||0 } }];"
      },
      "id": "778afdd8-05c9-4d8c-a190-bbd8955d358e",
      "name": "üìù Build LLM Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        176
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "options": {}
      },
      "id": "7746fce6-0c10-4897-af85-83dc7c691870",
      "name": "üß† Claude 3.5 Sonnet",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        896,
        16
      ]
    },
    {
      "parameters": {
        "jsCode": "const j=$input.first().json; return [{ json: { question:j.question, mode:j.mode, retrieval:j.retrieval, retrieval_conf:j.retrieval_conf } }];"
      },
      "id": "0875aba5-f9b5-47ba-a872-d23523263fda",
      "name": "üìä Extract Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        304
      ]
    },
    {
      "parameters": {
        "mode": "mergeByPosition",
        "options": {}
      },
      "id": "df2f677a-c13a-4d13-bfbe-0d114b118b8c",
      "name": "üîó Merge LLM + Metadata",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1120,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "function clamp(x,lo,hi){ return Math.max(lo, Math.min(hi,x)); }\nconst j=$input.first().json;\nconst retrieval_conf = Number(j.retrieval_conf ?? 0) || 0;\nconst question = j.question;\nconst mode = j.mode || \"bm25\";\nconst retrieval = j.retrieval || { selected: [] };\nconst raw = j?.choices?.[0]?.message?.content;\nif (!raw || typeof raw !== \"string\") {\n  return [{ json: { error:true, message:\"LLM call failed or returned no content\", details:j, question, mode } }];\n}\nlet parsed;\ntry { parsed = JSON.parse(raw); } catch {\n  const m = raw.match(/\\{[\\s\\S]*\\}/);\n  if (m) { try { parsed = JSON.parse(m[0]); } catch { return [{ json: { error:true, message:\"LLM returned invalid JSON and repair failed.\", details:{ raw }, question, mode } }]; } }\n  else { return [{ json: { error:true, message:\"LLM returned invalid JSON.\", details:{ raw }, question, mode } }]; }\n}\nif (typeof parsed.answer !== \"string\") return [{ json: { error:true, message:\"Invalid schema: 'answer' must be string.\", details:parsed, question, mode } }];\nif (typeof parsed.confidence_score !== \"number\" || Number.isNaN(parsed.confidence_score)) return [{ json: { error:true, message:\"Invalid schema: 'confidence_score' must be number.\", details:parsed, question, mode } }];\nif (!Array.isArray(parsed.sources)) return [{ json: { error:true, message:\"Invalid schema: 'sources' must be array.\", details:parsed, question, mode } }];\nconst blended = 0.6*clamp(parsed.confidence_score,0,1) + 0.4*clamp(retrieval_conf,0,1);\nconst allowedIds = new Set((retrieval.selected||[]).map(s=>String(s.id).trim()));\nlet sources = Array.from(new Set((parsed.sources||[]).map(s=>String(s).trim()).filter(Boolean))).filter(s=>allowedIds.has(s));\nif (sources.length===0 && (retrieval.selected||[]).length>0) sources=[String(retrieval.selected[0].id)];\nreturn [{ json: { error:false, result:{ answer: parsed.answer.trim(), confidence_score: clamp(Number(blended.toFixed(3)),0,1), sources }, question, mode, retrieval_method: retrieval.method || null } }];"
      },
      "id": "639fc41b-dcee-4593-b1fe-ddc0f90714c4",
      "name": "‚úÖ Validate JSON Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        176
      ]
    },
    {
      "parameters": {
        "content": "## üì§ OUTPUT\nShape success JSON or error JSON for webhook response",
        "height": 120,
        "width": 320
      },
      "id": "39921fd1-be69-4e1d-b94e-b8a81876a337",
      "name": "Output Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1440,
        -64
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.error}}",
              "operation": "isTrue"
            }
          ]
        },
        "options": {}
      },
      "id": "1cdf468b-26cf-4955-b058-907a5a04be2e",
      "name": "‚ùå Has Error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1552,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "const j=$input.first().json; return [{ json: { input: { question:j.question, mode:j.mode }, result: j.result } }];"
      },
      "id": "42b04392-d1b4-47ca-afe5-ec7dfe15f587",
      "name": "‚ú® Shape Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "const j=$input.first().json; const errMsg=j.message||\"Agent failed to answer.\"; return [{ json: { error:true, message:errMsg, details:j.details ?? null, hint:\"Ensure 'question' is provided and that OpenRouter key and KB are valid.\" } }];"
      },
      "id": "bce13966-e053-4ea4-ad40-808b629669bb",
      "name": "üí• Build Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        256
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "‚úÖ Validate Input": {
      "main": [
        [
          {
            "node": "‚ùì Valid Input?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùì Valid Input?": {
      "main": [
        [
          {
            "node": "üîó Has KB URL?",
            "type": "main",
            "index": 0
          },
          {
            "node": "üîó Merge Question + KB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üí• Build Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó Has KB URL?": {
      "main": [
        [
          {
            "node": "üåê Load External KB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üíæ Embedded KB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Load External KB": {
      "main": [
        [
          {
            "node": "üîÑ Normalize KB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Embedded KB": {
      "main": [
        [
          {
            "node": "üîÑ Normalize KB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Normalize KB": {
      "main": [
        [
          {
            "node": "üîó Merge Question + KB",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "üîó Merge Question + KB": {
      "main": [
        [
          {
            "node": "üß† Use Embeddings?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Use Embeddings?": {
      "main": [
        [
          {
            "node": "üìù Prepare Embedding Texts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìä BM25 Keyword Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä BM25 Keyword Scoring": {
      "main": [
        [
          {
            "node": "üìù Build LLM Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Prepare Embedding Texts": {
      "main": [
        [
          {
            "node": "üß† Generate Doc Embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "‚ùì Generate Query Embedding",
            "type": "main",
            "index": 0
          },
          {
            "node": "üîó Merge Doc Embeddings",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "üß† Generate Doc Embeddings": {
      "main": [
        [
          {
            "node": "üîó Merge Doc Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó Merge Doc Embeddings": {
      "main": [
        [
          {
            "node": "üì¶ Package Doc Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì¶ Package Doc Embeddings": {
      "main": [
        [
          {
            "node": "üîó Merge All Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùì Generate Query Embedding": {
      "main": [
        [
          {
            "node": "üì¶ Package Query Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì¶ Package Query Embedding": {
      "main": [
        [
          {
            "node": "üîó Merge All Embeddings",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "üîó Merge All Embeddings": {
      "main": [
        [
          {
            "node": "üìà Cosine Similarity Ranking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìà Cosine Similarity Ranking": {
      "main": [
        [
          {
            "node": "üìù Build LLM Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Build LLM Prompt": {
      "main": [
        [
          {
            "node": "üß† Claude 3.5 Sonnet",
            "type": "main",
            "index": 0
          },
          {
            "node": "üìä Extract Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Claude 3.5 Sonnet": {
      "main": [
        [
          {
            "node": "üîó Merge LLM + Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Extract Metadata": {
      "main": [
        [
          {
            "node": "üîó Merge LLM + Metadata",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "üîó Merge LLM + Metadata": {
      "main": [
        [
          {
            "node": "‚úÖ Validate JSON Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Validate JSON Response": {
      "main": [
        [
          {
            "node": "‚ùå Has Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Has Error?": {
      "main": [
        [
          {
            "node": "üí• Build Error Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ú® Shape Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Webhook Input": {
      "main": [
        [
          {
            "node": "‚úÖ Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1309b422-4cc2-465e-9f81-887e287c0ef2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9ddf6c23bf28c48c64cb59098b94ed465748dab6fbebe5e7a3d81e72b3a3ed26"
  },
  "id": "dIOoamzj5COiTuqS",
  "tags": []
}